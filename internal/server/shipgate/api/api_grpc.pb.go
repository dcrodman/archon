// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShipgateServiceClient is the client API for ShipgateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShipgateServiceClient interface {
	// GetActiveShips returns the list of Ships that currently connected to the
	// shipgate and ready to receive players.
	GetActiveShips(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShipList, error)
	// RegisterShip informs the shipgate that it is able to serve players.
	RegisterShip(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// AuthenticateAccount verifies an account. A password should be provided
	// via the rpc call metadata.
	AuthenticateAccount(ctx context.Context, in *AccountAuthRequest, opts ...grpc.CallOption) (*AccountAuthResponse, error)
}

type shipgateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShipgateServiceClient(cc grpc.ClientConnInterface) ShipgateServiceClient {
	return &shipgateServiceClient{cc}
}

func (c *shipgateServiceClient) GetActiveShips(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShipList, error) {
	out := new(ShipList)
	err := c.cc.Invoke(ctx, "/api.ShipgateService/GetActiveShips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipgateServiceClient) RegisterShip(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ShipgateService/RegisterShip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipgateServiceClient) AuthenticateAccount(ctx context.Context, in *AccountAuthRequest, opts ...grpc.CallOption) (*AccountAuthResponse, error) {
	out := new(AccountAuthResponse)
	err := c.cc.Invoke(ctx, "/api.ShipgateService/AuthenticateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShipgateServiceServer is the server API for ShipgateService service.
// All implementations must embed UnimplementedShipgateServiceServer
// for forward compatibility
type ShipgateServiceServer interface {
	// GetActiveShips returns the list of Ships that currently connected to the
	// shipgate and ready to receive players.
	GetActiveShips(context.Context, *emptypb.Empty) (*ShipList, error)
	// RegisterShip informs the shipgate that it is able to serve players.
	RegisterShip(context.Context, *RegistrationRequest) (*emptypb.Empty, error)
	// AuthenticateAccount verifies an account. A password should be provided
	// via the rpc call metadata.
	AuthenticateAccount(context.Context, *AccountAuthRequest) (*AccountAuthResponse, error)
	mustEmbedUnimplementedShipgateServiceServer()
}

// UnimplementedShipgateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShipgateServiceServer struct {
}

func (UnimplementedShipgateServiceServer) GetActiveShips(context.Context, *emptypb.Empty) (*ShipList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveShips not implemented")
}
func (UnimplementedShipgateServiceServer) RegisterShip(context.Context, *RegistrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterShip not implemented")
}
func (UnimplementedShipgateServiceServer) AuthenticateAccount(context.Context, *AccountAuthRequest) (*AccountAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateAccount not implemented")
}
func (UnimplementedShipgateServiceServer) mustEmbedUnimplementedShipgateServiceServer() {}

// UnsafeShipgateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShipgateServiceServer will
// result in compilation errors.
type UnsafeShipgateServiceServer interface {
	mustEmbedUnimplementedShipgateServiceServer()
}

func RegisterShipgateServiceServer(s grpc.ServiceRegistrar, srv ShipgateServiceServer) {
	s.RegisterService(&ShipgateService_ServiceDesc, srv)
}

func _ShipgateService_GetActiveShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipgateServiceServer).GetActiveShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShipgateService/GetActiveShips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipgateServiceServer).GetActiveShips(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipgateService_RegisterShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipgateServiceServer).RegisterShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShipgateService/RegisterShip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipgateServiceServer).RegisterShip(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipgateService_AuthenticateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipgateServiceServer).AuthenticateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShipgateService/AuthenticateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipgateServiceServer).AuthenticateAccount(ctx, req.(*AccountAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShipgateService_ServiceDesc is the grpc.ServiceDesc for ShipgateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShipgateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ShipgateService",
	HandlerType: (*ShipgateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveShips",
			Handler:    _ShipgateService_GetActiveShips_Handler,
		},
		{
			MethodName: "RegisterShip",
			Handler:    _ShipgateService_RegisterShip_Handler,
		},
		{
			MethodName: "AuthenticateAccount",
			Handler:    _ShipgateService_AuthenticateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
